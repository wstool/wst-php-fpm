DefaultRuntimeDir {{ .Service.RunDir }}

PidFile {{ .Service.RunDir }}/httpd.pid

#
# Timeout: The number of seconds before receives and sends time out.
#
Timeout 300

#
# KeepAlive: Whether or not to allow persistent connections (more than
# one request per connection). Set to "Off" to deactivate.
#
KeepAlive On

#
# MaxKeepAliveRequests: The maximum number of requests to allow
# during a persistent connection. Set to 0 to allow an unlimited amount.
# We recommend you leave this number high, for maximum performance.
#
MaxKeepAliveRequests 100

#
# KeepAliveTimeout: Number of seconds to wait for the next request from the
# same client on the same connection.
#
KeepAliveTimeout 5

# User and group used.
User {{ .Service.User }}
Group {{ .Service.Group }}

#
# HostnameLookups: Log the names of clients or just their IP addresses
# e.g., www.apache.org (on) or 204.62.129.132 (off).
# The default is off because it'd be overall better for the net if people
# had to knowingly turn this feature on, since enabling it means that
# each client request will result in AT LEAST one lookup request to the
# nameserver.
#
HostnameLookups Off

# ErrorLog: The location of the error log file.
# If you do not specify an ErrorLog directive within a <VirtualHost>
# container, error messages relating to that virtual host will be
# logged here.  If you *do* define an error logfile for a <VirtualHost>
# container, that host's errors will be logged there and not here.
#
ErrorLog /dev/stderr

CustomLog /dev/stdout vhost_combined

#
# LogLevel: Control the severity of messages logged to the error_log.
# Available values: trace8, ..., trace1, debug, info, notice, warn,
# error, crit, alert, emerg.
# It is also possible to configure the log level for particular modules, e.g.
# "LogLevel info ssl:warn"
#
LogLevel debug

{{ $modules_dir := .Parameters.GetString  "httpd_modules" -}}
LoadModule authz_core_module {{ $modules_dir }}/mod_authz_core.so
LoadModule lbmethod_byrequests_module {{ $modules_dir }}/mod_lbmethod_byrequests.so
LoadModule proxy_module {{ $modules_dir }}/mod_proxy.so
LoadModule proxy_balancer_module {{ $modules_dir }}/mod_proxy_balancer.so
LoadModule proxy_fcgi_module {{ $modules_dir }}/mod_proxy_fcgi.so
LoadModule mpm_event_module {{ $modules_dir }}/mod_mpm_event.so
LoadModule setenvif_module {{ $modules_dir }}/mod_setenvif.so
LoadModule slotmem_shm_module {{ $modules_dir }}/mod_slotmem_shm.so

<IfModule mpm_event_module>
	StartServers			 2
	MinSpareThreads		 25
	MaxSpareThreads		 75
	ThreadLimit			 64
	ThreadsPerChild		 25
	MaxRequestWorkers	  150
	MaxConnectionsPerChild   0
</IfModule>

Listen {{ .Service.LocalAddress }}

# AccessFileName: The name of the file to look for in each directory
# for additional configuration directives.  See also the AllowOverride
# directive.
#
AccessFileName .htaccess

#
# The following directives define some format nicknames for use with
# a CustomLog directive.
#
# These deviate from the Common Log Format definitions in that they use %O
# (the actual bytes sent including headers) instead of %b (the size of the
# requested file), because the latter makes it impossible to detect partial
# requests.
#
# Note that the use of %{X-Forwarded-For}i instead of %h is not recommended.
# Use mod_remoteip instead.
#
LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" vhost_combined
LogFormat "%h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" combined
LogFormat "%h %l %u %t \"%r\" %>s %O" common
LogFormat "%{Referer}i -> %U" referer
LogFormat "%{User-agent}i" agent

DocumentRoot {{ .Service.ScriptDir }}

HttpProtocolOptions Unsafe LenientMethods Allow0.9

{{ if eq (.Parameters.GetString "proxy_type") "balancer"  -}}
ProxyPass / "balancer://myappcluster{{ .Service.ScriptDir }}"
<Proxy "balancer://myappcluster/">
{{   range $service := .Parameters.GetArray "dest_services" }} -}}
    BalancerMember "fcgi://{{ (.Services.Find $service.ToString).PrivateAddress }}"
{{   end }}
</Proxy>
{{ else -}}
{{   $service := (.Services.Find (.Parameters.GetString  "dest_service")) -}}
{{   $address := "" -}}
{{   if eq (.Parameters.GetString "upstream_address_type") "uds" -}}
{{     $address = printf "unix:%s|fcgi://localhost" ($service.UdsPath (.Parameters.GetString  "upstream_uds_name" "")) -}}
{{   else -}}
{{     $address = printf "fcgi://%s" $service.PrivateAddress -}}
{{   end -}}
{{   if eq (.Parameters.GetString "proxy_type") "pass_match" -}}
ProxyPassMatch ^/(.*\.php(/.*)?)$ {{ $address }}{{ .Service.ScriptDir }}/$1
{{   else if eq (.Parameters.GetString "proxy_type") "pass" -}}
ProxyPass / {{ $address }}{{ .Service.ScriptDir }}/
{{   else -}}
# Handler
<FilesMatch ".+\.php$">
	ProxyFCGIBackendType FPM
    SetHandler "proxy:{{ $address }}"
</FilesMatch>
{{   end -}}
{{ end -}}

ServerName localhost

<VirtualHost *:{{ .Service.LocalPort }}>
	ServerAdmin webmaster@localhost
	DocumentRoot {{ .Service.ScriptDir }}
</VirtualHost>
