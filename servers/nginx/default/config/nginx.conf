pid {{ .Service.RunDir }}/nginx.pid;
daemon off;

error_log /dev/stderr info;

{{- range $name, $value := .Parameters.GetObject "global_directives" }}
{{ $name }} {{ $value.ToString }};
{{- end }}

events {
    worker_connections {{ .Parameters.GetString "worker_connections" }};
}

http {
    log_format wst '"$request" $status';

    error_log {{ .Parameters.GetString "error_log" }} info;
    access_log {{ .Parameters.GetString "access_log" }} wst;

    {{- range $name, $value := .Parameters.GetObject "http_directives" }}
    {{ $name }} {{ $value.ToString }};
    {{- end }}

    server {
        listen       {{ .Service.LocalAddress }} default_server;
        server_name  _;
        server_name  _;
        root         {{ .Service.ScriptDir }};

        {{- range $name, $value := .Parameters.GetObject "server_directives" }}
        {{ $name }} {{ $value.ToString }};
        {{- end }}

        location / {
            fastcgi_split_path_info ^(.+?\.php)(/.*)$;
            fastcgi_param PATH_INFO $fastcgi_path_info;
            {{   $service := (.Services.Find (.Parameters.GetString  "dest_service")) -}}
            {{   $address := "" -}}
            {{   if eq (.Parameters.GetString "upstream_address_type") "uds" -}}
            {{     $address = printf "unix:%s" ($service.UdsPath (.Parameters.GetString  "upstream_uds_name" ""))  -}}
            {{   else -}}
            {{     $address = $service.PrivateAddress -}}
            {{   end -}}
            fastcgi_pass {{ $address }};
            include fastcgi_params;

            {{- range $name, $value := .Parameters.GetObject "root_location_directives" }}
            {{ $name }} {{ $value.ToString }};
            {{- end }}
        }

        {{- range $match, $directives := .Parameters.GetObject "extra_locations" -}}
        location $match {
            {{- range $name, $value := $directives.ToObject }}
            {{ $name }} {{ $value.ToString }};
            {{- end }}
        }
        {{- end }}
    }
}
